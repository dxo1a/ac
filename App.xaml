<Application x:Class="ac.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:ac"
             xmlns:converters="clr-namespace:ac.Converters"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:themes="clr-namespace:StyledWindow.WPF.Themes;assembly=StyledWindow.WPF"
             xmlns:components="clr-namespace:StyledWindow.WPF.Components;assembly=StyledWindow.WPF"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
            <ResourceDictionary.MergedDictionaries>
                <materialDesign:BundledTheme BaseTheme="Inherit" PrimaryColor="Grey" SecondaryColor="LightBlue" ColorAdjustment="{materialDesign:ColorAdjustment}" />
                <ResourceDictionary Source="pack://application:,,,/StyledWindow.WPF;component/Themes/Generic.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!--DataGrid用のスタイル-->

            <converters:StatusConverter x:Key="StatusConverter"/>
            <converters:StatusFromBoolConverter x:Key="StatusFromBoolConverter"/>
            <converters:BytesToBitmapImageConverter x:Key="BytesToBitmapImageConverter"/>
            <converters:BoolToColorConverter x:Key="BoolToColorConverter"/>
            <converters:ELTypeConverter x:Key="ELTypeConverter"/>


            <DropShadowEffect x:Key="ShadowEffect" BlurRadius="15" Direction="310" ShadowDepth="8" Color="Black" Opacity="0.8"/>
            <DropShadowEffect x:Key="ShadowEffectDown" ShadowDepth="5" Direction="240" BlurRadius="10" Opacity="1" Color="Gray"/>
            <DropShadowEffect x:Key="ShadowEffectUp" ShadowDepth="5" Direction="90" BlurRadius="10" Opacity="1" Color="Gray"/>
            <DropShadowEffect x:Key="shadForText" BlurRadius="3" Direction="0" ShadowDepth="1" Color="Black"/>
            <DropShadowEffect x:Key="shadForTextOnLight" BlurRadius="1" Direction="0" ShadowDepth="1" Color="Black"/>
            <BlurEffect x:Key="BlurEffect" Radius="10" KernelType="Gaussian"/>

            <Style TargetType="DataGridCell" x:Key="ReadyCell">
                <Setter Property="BorderThickness" Value="0"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding StatusBool, Converter={StaticResource StatusFromBoolConverter}}" Value="Готово">
                        <Setter Property="Background" Value="LightGreen"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="DataGridOwn" TargetType="DataGrid">
                <!-- Make the border and grid lines a little less imposing -->
                <Setter Property="BorderBrush" Value="#DDDDDD" />
                <Setter Property="HorizontalGridLinesBrush" Value="Transparent" />
                <Setter Property="VerticalGridLinesBrush" Value="DarkGray" />

                <Setter Property="RowHeaderWidth" Value="0"/>
                <Setter Property="ColumnHeaderStyle">
                    <Setter.Value>
                        <Style TargetType="DataGridColumnHeader">
                            <Setter Property="Background" Value="LightGray"/>
                            <Setter Property="BorderBrush" Value="Black"/>
                            <Setter Property="BorderThickness" Value="0.5 0"/>
                            <Setter Property="Padding" Value="5 4 0 4"/>
                            <Setter Property="FontWeight" Value="SemiBold"/>

                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="DarkGray"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="RowStyle">
                    <Setter.Value>
                        <Style TargetType="DataGridRow">
                            <Setter Property="MaxHeight" Value="150" />
                            <Setter Property="BorderBrush" Value="Transparent" />
                            <Setter Property="BorderThickness" Value="0 0 0 0" />
                            <Style.Triggers>
                                <!-- Highlight a grid row as the mouse passes over -->
                                <!--<DataTrigger Binding="{Binding Status, Converter={StaticResource StatusConverter}}" Value="Изготовлено">
                                    <Setter Property="Background" Value="LightGreen"/>
                                </DataTrigger>-->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderBrush" Value="DarkGray" />
                                    <Setter Property="BorderThickness" Value="0 1 0 1" />
                                    <Setter Property="Background" Value="Transparent" />
                                    <Setter Property="FontSize" Value="13"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="CellStyle">
                    <Setter.Value>
                        <Style TargetType="DataGridCell">
                            <Style.Triggers>
                                <!-- Highlight selected rows -->
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="#d7d7d7" />
                                    <Setter Property="BorderBrush" Value="#d7d7d7" />
                                    <Setter Property="Foreground" Value="Black" />
                                    <Setter Property="FontSize" Value="13"/>
                                    <Setter Property="FontWeight" Value="SemiBold"/>
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="Background" Value="#d7d7d7" />
                                    <Setter Property="BorderBrush" Value="#d7d7d7" />
                                    <Setter Property="BorderThickness" Value="1"/>
                                    <Setter Property="Foreground" Value="Black" />
                                </Trigger>
                            </Style.Triggers>
                            <!-- Add some padding around the contents of a cell -->
                            <Setter Property="Padding" Value="4,3,4,3" />
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="DataGridCell">
                                        <Border Padding="{TemplateBinding Padding}" 
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}">
                                            <ContentPresenter />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="FocusVisualStyle">
                                <Setter.Value>
                                    <Style TargetType="Control">
                                        <Setter Property="BorderBrush" Value="Transparent" />
                                    </Style>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="{x:Type Separator}">
                <Setter Property="Background"  Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                <Setter Property="Margin" Value="0,2,0,2"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Separator}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Height="1" SnapsToDevicePixels="true"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="UpRoundedButtonStyle" TargetType="Button">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="ButtonBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="10 10 0 0">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Setter Property="Foreground" Value="Black"/>
                                    <Setter Property="Opacity" Value="0.4"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="True">
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Setter Property="Foreground" Value="Black"/>
                                    <Setter Property="Opacity" Value="1"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="LightGray" />
                                    <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="DarkGray" />
                                    <Setter TargetName="ButtonBorder" Property="BorderThickness" Value="2 2 2 0" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="RoundedButtonStyle" TargetType="Button">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="ButtonBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="10">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="DarkGray" />
                                    <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="#FF4C4C4C" />
                                    <Setter TargetName="ButtonBorder" Property="BorderThickness" Value="0" />
                                    <Setter TargetName="ButtonBorder" Property="Cursor" Value="Hand" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="False">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="LightGray" />
                                    <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="#FF4C4C4C" />
                                    <Setter TargetName="ButtonBorder" Property="BorderThickness" Value="0" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" Value="Gray"/>
                                    <Setter Property="Foreground" Value="Black"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="RightRoundedButtonStyle" TargetType="Button">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="ButtonBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0 10 10 0">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="DarkGray" />
                                    <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="#FF4C4C4C" />
                                    <Setter TargetName="ButtonBorder" Property="BorderThickness" Value="0" />
                                    <Setter TargetName="ButtonBorder" Property="Cursor" Value="Hand" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="False">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="LightGray" />
                                    <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="#FF4C4C4C" />
                                    <Setter TargetName="ButtonBorder" Property="BorderThickness" Value="0" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" Value="Gray"/>
                                    <Setter Property="Foreground" Value="Black"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="TBXStyle" TargetType="TextBox" BasedOn="{StaticResource MaterialDesignTextBox}">
                <Setter Property="Padding" Value="5 5 15 0"/>
            </Style>

            <Style TargetType="TextBox">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TextBox">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                <ScrollViewer x:Name="PART_ContentHost" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderBrush" Value="#FF4C4C4C" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ShowTextboxAnimation" TargetType="TextBox" BasedOn="{StaticResource TBXStyle}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsDetailSearchVisible}" Value="True">
                        <DataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="Width" From="0" To="220" Duration="0:0:0.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="Width" From="220" To="0" Duration="0:0:0.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="VerticalSeparatorStyle" TargetType="{x:Type Separator}" BasedOn="{StaticResource {x:Type Separator}}">
                <Setter Property="Margin" Value="5,0,0,0"/>
                <Setter Property="LayoutTransform">
                    <Setter.Value>
                        <TransformGroup>
                            <TransformGroup.Children>
                                <TransformCollection>
                                    <RotateTransform Angle="90"/>
                                </TransformCollection>
                            </TransformGroup.Children>
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
                <!--<Setter Property="Effect" Value="{StaticResource ShadowEffectSeparator}"/>-->
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
